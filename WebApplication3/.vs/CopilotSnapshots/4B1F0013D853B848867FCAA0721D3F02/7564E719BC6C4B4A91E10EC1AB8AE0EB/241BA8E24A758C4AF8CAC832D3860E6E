using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using WebApplication3.Models;
using WebApplication3.Services;

namespace WebApplication3.Pages
{
    public class IndexModel : PageModel
    {
        private readonly ILogger<IndexModel> _logger;
        private readonly ITareaService _tareaService;

        public IndexModel(ILogger<IndexModel> logger, ITareaService tareaService)
        {
            _logger = logger;
            _tareaService = tareaService;
        }

        public List<Tarea> Tareas { get; set; } = new List<Tarea>();
        public int PaginaActual { get; set; } = 1;
        public int TotalPaginas { get; set; }
        public int TareasPorPagina { get; set; } = 5;

        [BindProperty(SupportsGet = true)]
        public int Pagina { get; set; } = 1;

        [BindProperty(SupportsGet = true)]
        public int ItemsPorPagina { get; set; } = 5;

        public async Task OnGetAsync()
        {
            PaginaActual = Pagina;
            TareasPorPagina = ItemsPorPagina;

            var resultado = await _tareaService.GetTareasPaginadasAsync(PaginaActual, TareasPorPagina);
            Tareas = resultado.tareas;
            TotalPaginas = resultado.totalPages;
        }

        public string GetEstadoClass(string estado)
        {
            return estado.ToLower() switch
            {
                "pendiente" => "status-pending",
                "finalizado" => "status-completed",
                "en curso" => "status-in-progress",
                _ => "status-pending"
            };
        }

        public string GetEstadoIcon(string estado)
        {
            return estado.ToLower() switch
            {
                "pendiente" => "fas fa-clock",
                "finalizado" => "fas fa-check-circle",
                "en curso" => "fas fa-play-circle",
                _ => "fas fa-clock"
            };
        }
    }
}
